1.请谈谈你对volatile的理解？
  volatile是java虚拟机提供的轻量级的同步机制
  保证可见性，不保证原子性，禁止指令重排
  JMM(Java Memory Model,JMM)内存模型，本身是一种抽象的概念并不真实存在，它描述的是一组规则或规范，通过这组规范定义了程序中各个变量
  （包括实例字段，静态字段和构成数组对象的元素）的访问方式，三大特性：可见性，原子性，有序性。
  JMM关于同步的规定：
  1.线程解锁前，必须把共享变量的值刷新回内存
  2.线程加锁前，必须读取主内存最新的值到自己的工作内存
  3.加锁解锁是用一把锁
  由于JVM运行内存的实体是线程，而每个线程创建的时候JVM都会为其创建一个工作内存（栈空间），工作内存是每个线程的私有区域，而
  Java内存模型中规定所有变量都存储在主内存，主内存是共享内存区域，所有线程都可以访问，但线程对变量的操作（读取赋值等）必须
  在工作内存中进行，首先要将变量从主内存中拷贝到自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写会主内存，不能
  直接操作主内存中的变量，各个线程中的工作内存中存储着主内存中的变量副本拷贝，因此不同的线程间无法访问对方的工作内存，线程间
  的通信（传值）必须通过主内存完成。

  保证可见性：保证当前线程一旦修改了从主内存拷贝过来的值后（此时值拷贝到了当前线程的私有内存），能够马上被其他拷贝了主内存的
             值的线程知道。
             可见性的代码验证【VolatileDemo.java】


